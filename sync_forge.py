import os
import sys
import requests
import re
from datetime import datetime
from urllib.parse import urljoin

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from app import app
from models import db, BuildType, BuildVersion
from mc_server import BASE_BUILD_PATH

BUILD_NAME = "FORGE"
FORGE_PROMOTIONS_API = "https://files.minecraftforge.net/maven/net/minecraftforge/forge/promotions_slim.json"
FORGE_MAVEN_REPO = "https://maven.minecraftforge.net/net/minecraftforge/forge/"

# üîß MANU√ÅLNƒö NASTAVEN√Å MINIM√ÅLN√ç VERZE - ZMƒö≈áTE PODLE POT≈òEBY
MIN_MINECRAFT_VERSION = "1.21"  # Pouze verze 1.18 a novƒõj≈°√≠

def get_forge_versions():
    print("‚è¨ Naƒç√≠t√°m seznam Forge verz√≠...")
    print(f"üîß Manu√°lnƒõ nastaveno: Stahuji pouze verze Minecraftu {MIN_MINECRAFT_VERSION} a novƒõj≈°√≠")
    
    try:
        response = requests.get(FORGE_PROMOTIONS_API, timeout=15)
        response.raise_for_status()
        promotions = response.json().get("promos", {})

        versions = []
        pat = re.compile(r'^(?P<mc>[\d\.]+)-(recommended|latest)$')

        for key, build_version in promotions.items():
            m = pat.match(key)
            if not m:
                continue
            
            mc_version = m.group('mc')
            forge_version = str(build_version)

            # üö® FILTRACE PODLE MINIM√ÅLN√ç VERZE
            if not is_version_equal_or_newer(mc_version, MIN_MINECRAFT_VERSION):
                continue

            artifact_path = f"{mc_version}-{forge_version}/forge-{mc_version}-{forge_version}-installer.jar"
            url = urljoin(FORGE_MAVEN_REPO, artifact_path)

            # üîé ovƒõ≈ôen√≠, ≈æe installer existuje
            head = requests.head(url)
            if head.status_code == 404:
                print(f"‚ö†Ô∏è  P≈ôeskakuji {mc_version}-{forge_version}, installer nen√≠ na Maven repo.")
                continue

            versions.append((mc_version, forge_version, url))

        print(f"üî¢ Nalezeno {len(versions)} Forge verz√≠ ({MIN_MINECRAFT_VERSION}+) dostupn√Ωch na Maven repo.")
        return versions
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ Forge verz√≠: {e}")
        return []

def is_version_equal_or_newer(version, min_version):
    """
    Porovn√°n√≠ verz√≠ Minecraftu - zda je verze rovna nebo novƒõj≈°√≠ ne≈æ min_version
    """
    try:
        v1_parts = list(map(int, version.split('.')))
        v2_parts = list(map(int, min_version.split('.')))
        
        # Doplnƒõn√≠ na stejn√Ω poƒçet ƒç√°st√≠
        max_len = max(len(v1_parts), len(v2_parts))
        v1_parts.extend([0] * (max_len - len(v1_parts)))
        v2_parts.extend([0] * (max_len - len(v2_parts)))
        
        # Porovn√°n√≠
        for i in range(max_len):
            if v1_parts[i] > v2_parts[i]:
                return True
            elif v1_parts[i] < v2_parts[i]:
                return False
        return True  # Verze jsou stejn√©
    except ValueError:
        # Fallback pro neƒç√≠seln√© verze
        return version >= min_version

def ensure_build_type():
    build_type = BuildType.query.filter_by(name=BUILD_NAME).first()
    if not build_type:
        build_type = BuildType(name=BUILD_NAME, description="Forge server builds")
        db.session.add(build_type)
        db.session.commit()
        print("‚úÖ BuildType FORGE vytvo≈ôen.")
    return build_type

def save_build_record_if_missing(mc_version, forge_version, url, build_type, file_path):
    exists = BuildVersion.query.filter_by(
        build_type=build_type,
        mc_version=mc_version,
        build_number=forge_version
    ).first()
    if exists:
        print(f"‚úîÔ∏è  Forge {mc_version} build {forge_version} ji≈æ v datab√°zi existuje.")
        return

    build = BuildVersion(
        build_type=build_type,
        mc_version=mc_version,
        build_number=forge_version,
        download_url=url,
        file_path=file_path,
        created_at=datetime.utcnow()
    )
    db.session.add(build)
    db.session.commit()
    print(f"üìÑ Z√°znam pro Forge {mc_version} build {forge_version} p≈ôid√°n do datab√°ze.")

def download_and_save_build(mc_version, forge_version, url, build_type):
    version_folder = f"{mc_version}-{forge_version}"
    version_path = os.path.join(BASE_BUILD_PATH, BUILD_NAME, "versions", version_folder)
    os.makedirs(version_path, exist_ok=True)

    installer_path = os.path.join(version_path, "installer.jar")
    server_path = os.path.join(version_path, "server.jar")

    # Pokud u≈æ m√°me server.jar, nemus√≠me nic dƒõlat
    if os.path.exists(server_path):
        print(f"üìÅ Server jar pro Forge {mc_version} build {forge_version} ji≈æ existuje.")
        save_build_record_if_missing(mc_version, forge_version, url, build_type, server_path)
        return

    # St√°hnout installer
    print(f"‚¨áÔ∏è  Stahuji {url} ‚Üí {installer_path}")
    response = requests.get(url, stream=True, timeout=30)
    response.raise_for_status()
    with open(installer_path, "wb") as f:
        for chunk in response.iter_content(chunk_size=8192):
            f.write(chunk)

    # Spustit installer pro vytvo≈ôen√≠ server.jar
    print(f"‚öôÔ∏è  Spou≈°t√≠m Forge installer...")
    import subprocess
    subprocess.run(["java", "-jar", installer_path, "--installServer"], cwd=version_path, check=True)

    # Zkontrolovat v√Ωsledek
    if not os.path.exists(server_path):
        # naj√≠t nejbli≈æ≈°√≠ forge-*-server.jar a p≈ôejmenovat
        for f in os.listdir(version_path):
            if f.startswith("forge-") and f.endswith(".jar"):
                os.rename(os.path.join(version_path, f), server_path)
                break

    if not os.path.exists(server_path):
        print(f"‚ùå Nepoda≈ôilo se naj√≠t Forge server.jar pro {mc_version}-{forge_version}")
        return

    print(f"‚úÖ Forge server {mc_version}-{forge_version} p≈ôipraven ({server_path}).")
    save_build_record_if_missing(mc_version, forge_version, url, build_type, server_path)

def run_sync():
    print("üöÄ Spou≈°t√≠m synchronizaci FORGE build≈Ø...")
    print(f"üéØ MANU√ÅLN√ç FILTR: Pouze verze Minecraftu {MIN_MINECRAFT_VERSION} a novƒõj≈°√≠")
    
    versions = get_forge_versions()
    build_type = ensure_build_type()
    new_versions = []

    for mc_version, forge_version, url in versions:
        db_exists = BuildVersion.query.filter_by(
            build_type=build_type,
            mc_version=mc_version,
            build_number=forge_version
        ).first()

        version_folder = f"{mc_version}-{forge_version}"
        file_path = os.path.join(BASE_BUILD_PATH, BUILD_NAME, "versions", version_folder, "installer.jar")
        file_exists = os.path.exists(file_path)

        if file_exists and db_exists:
            print(f"‚è≠Ô∏è  Forge {mc_version} build {forge_version} ji≈æ existuje (soubor + DB).")
            continue

        download_and_save_build(mc_version, forge_version, url, build_type)
        new_versions.append(f"{mc_version}-{forge_version}")

    if new_versions:
        message = f"Nalezeno {len(new_versions)} nov√Ωch Forge build≈Ø ({MIN_MINECRAFT_VERSION}+): {', '.join(new_versions)}"
        print(f"‚úÖ {message}")
        return {"status": "success", "new_versions": new_versions, "message": message}
    else:
        message = f"≈Ω√°dn√© nov√© Forge buildy ({MIN_MINECRAFT_VERSION}+) nebyly nalezeny."
        print(f"‚ÑπÔ∏è  {message}")
        return {"status": "no_changes", "new_versions": [], "message": message}

if __name__ == "__main__":
    with app.app_context():
        run_sync()